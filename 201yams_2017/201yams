#!/bin/python3
import sys
from math import *


def aff_h_func():
    _h = open("h_file.txt", "r")
    _array = _h.read().split('\n')
    for _line in _array:
        print (_line)


def check_input():
    if len(sys.argv) != 7:
        print("There must be 5 parameters")
        exit(84)
    i = 1
    is_zero = False
    if int(sys.argv[1]) == 0:
        is_zero = True
    while i < 6:
        if not sys.argv[i].isdigit():
            print("Error: {} is not digital".format(sys.argv[i]))
            exit(84)
        if is_zero is True and int(sys.argv[i]) != 0:
            print("Error: {} must be equal to 0".format(sys.argv[i]))
            exit(84)
        if is_zero is False and int(sys.argv[i]) == 0:
            print("Error: At {}th param: can't be equal to 0".format(i))
            exit(84)
        if int(sys.argv[i]) > 6:
            print("Error: {} must be lower or equal than 6".format(sys.argv[i]))
            exit(84)
        i += 1
    arr = sys.argv[6].split("_")
    if arr[0] == "full":
        if len(arr) > 3:
            print("Error in last arg: {}: To much arguments".format(arr[0]))
            exit(84)
        elif len(arr) < 3:
            print("Error in last arg: {}: Not enough arguments".format(arr[0]))
            exit(84)
    else:
        if len(arr) > 2:
            print("Error in last arg: {}: To much arguments".format(arr[0]))
            exit(84)
        elif len(arr) < 2:
            print("Error in last arg: {}: Not enough arguments".format(arr[0]))
            exit(84)
    if arr[0].isdigit():
        print("Error in last arg: {}: must be digital".format(arr[0]))
        exit(84)
    for i in range(1, len(arr)):
        if not arr[i].isdigit():
            print("Error in last arg: {}: is not digital".format(arr[i]))
            exit(84)
        if int(arr[i]) == 0 or int(arr[i]) > 6:
            print("Error in last arg: {}: must be between 1 and 6".format(arr[i]))
            exit(84)

# Return the result in percent


def binomiale(a, b):
    res = (factorial(a) / (factorial(b) * factorial(a-b))) * pow(1/6, b) * pow(5/6, a-b)
    return res


def addition_all_param():
    tab = []
    for i in range(1, len(sys.argv) - 1):
        tab.append(int(sys.argv[i]))
    return tab


def calc_probabilite(c, nb):
    res = 0
    nb_list = addition_all_param()
    nb_occurence = nb_list.count(int(nb))
    if nb_occurence >= c:
        res = 1
    else:
        for x in range(c - nb_occurence, 5 - nb_occurence + 1):
            res += binomiale(5 - nb_occurence, x)
    return res * 100


def pair_handling():
    arr = sys.argv[6].split("_")
    res = calc_probabilite(2, arr[1])
    print("chances to get a {} pair:  %.2f%%".format(arr[1]) % float(res))


def three_handling():
    arr = sys.argv[6].split("_")
    res = calc_probabilite(3, arr[1])
    print("chances to get a {} three-of-a-kind:  %.2f%%".format(arr[1]) % float(res))


def four_handling():
    arr = sys.argv[6].split("_")
    res = calc_probabilite(4, arr[1])
    print("chances to get a {} four-of-a-kind:  %.2f%%".format(arr[1]) % float(res))


def yams_handling():
    arr = sys.argv[6].split("_")
    res = calc_probabilite(5, arr[1])
    print("chances to get a {} yams:  %.2f%%".format(arr[1]) % float(res))


def full_handling():
    arr = sys.argv[6].split("_")
    if arr[1] == arr[2]:
        print("Error in last arg: You can't have two same number for Full")
        exit(84)
    i = 1
    d2 = 2.0
    d3 = 3.0
    result = 0.0
    while i < 6:
        if int(sys.argv[i]) == int(arr[2]):
            d2 -= 1
            if d2 == 0:
                break
        i += 1
    i = 1
    while i < 6:
        if int(sys.argv[i]) == int(arr[1]):
            d3 -= 1
            if d3 == 0:
                break
        i += 1
    if d2 > d3:
        result = factorial(5 - (2 - d2) - (3 - d3)) / (
                factorial(d2) * factorial(5 - (2 - d2) - (3 - d3) - d2))
    else:
        result = factorial(5 - (2 - d2) - (3 - d3)) / (
                    factorial(d3) * factorial(5 - (2 - d2) - (3 - d3) - d3))
    tmp = d2 + d3
    while tmp > 0:
        result = result * (1.0 / 6.0)
        tmp -= 1
    print("chances to get a " + arr[1] + " full of " + arr[2] + ":  %.2f%%" % float(result*100))


def straight_handling():
    arr = sys.argv[6].split("_")
    if int(arr[1]) < 5:
        print("Error in last arg: You can't get a straight less than 5")
        exit(84)
    j = 0
    data = []
    if int(arr[1]) == 5:
        for nb in range(1, len(sys.argv) - 1):
            for i in range(1, 6):
                if i not in data:
                    if int(sys.argv[nb]) == i:
                        j += 1
                        data.append(i)
    elif int(arr[1]) == 6:
        for nb in range(1, len(sys.argv) - 1):
            for i in range(2, 7):
                if i not in data:
                    if int(sys.argv[nb]) == i:
                        j += 1
                        data.append(i)
    if j == 0:
        res = ((1 / pow(6, 5)) * factorial(5)) * 100
    else:
        res = ((1 / pow(6, (5 - j))) * factorial(5 - j)) * 100
    print("chances to get a {} straight:  %.2f%%".format(arr[1]) % float(res))


def parse_combination(combi):
    arr = combi.split("_")
    options = {"pair": pair_handling,
               "three": three_handling,
               "four": four_handling,
               "full": full_handling,
               "straight": straight_handling,
               "yams": yams_handling,
               }
    func = options.get(arr[0], "Error")
    if func is "Error":
        print("Error: Last argument: {}: Invalid Argument".format(arr[0]))
        exit(84)
    func()


def main():
    if sys.argv[1] == "-h" and len(sys.argv) == 2:
        aff_h_func()
        return 0
    if len(sys.argv) != 7:
        print("Not enough arguments")
        exit(84)
    elif len(sys.argv) == 7:
        check_input()
        parse_combination(sys.argv[6])
    else:
        return 84


if __name__ == '__main__':
    main()
